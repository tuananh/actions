# Copyright 2022 Tuan Anh Tran <me@tuananh.org>

name: Build image with kaniko
description: |
  This action build an OCI image with kaniko

inputs:
  image:
    description: image to be used. Default to gcr.io/kaniko-project/executor
    default: gcr.io/kaniko-project/executor:latest
    required: false
  
  destination:
    description: destination flag
    required: false

  build-args:
    description: build args
    required: false

  cache:
    description: cache flag
    required: false

  cache-dir:
    description: cache-dir flag
    required: false
  
  cache-repo:
    description: cache-repo flag
    required: false

  cache-copy-layers:
    description: cache-copy-layers flag
    required: false

  cache-ttl:
    description: cache-ttl flag
    required: false

  cleanup:
    description: cleanup flag
    required: false

  context:
    description: context flag
    default: dir://${{ github.workspace }}
    required: false

  context-sub-path:
    description: context-sub-path flag
    required: false

  dockerfile:
    description: dockerfile flag
    default: Dockerfile
    required: false

  reproducible:
    description: reproducible flag
    required: false

  no-push:
    description: no-push flag
    required: false

  # required if you want to push to registry
  registry-url:
    description: registry url
    required: false

  registry-username:
    description: registry username
    required: false

  registry-password:
    description: registry password
    required: false
  
# outputs:
#   digest:
#     description: |
#       The digest of the published container image.

runs:
  using: docker
  # TODO: (tuananh) figure out how to use image from inputs
  # image: "docker://${{ inputs.image }}"
  image: "docker://gcr.io/kaniko-project/executor:debug"
  entrypoint: /bin/sh
  env:
    REGISTRY_PASSWORD: ${{ inputs.registry-password }}
    REGISTRY_USER: ${{ inputs.registry-user }}
    REGISTRY_URL: ${{ inputs.registry-url }}
  args:
    - "-c"
    - |
      set -o errexit

      function download_crane() {
        CRANE_VERSION=v0.10.0
        CRANE_BASE_URL="https://github.com/google/go-containerregistry/releases/download"
        case "$(echo $RUNNER_ARCH | awk '{print tolower($0)}')" in
        x86|x64) ARCH=x86_64;;
        arm64)   ARCH=arm64;;
        *)
          echo Unsupported RUNNER_ARCH \"$RUNNER_ARCH\"
          exit -1
          ;;
        esac
        case "$(echo $RUNNER_OS | awk '{print tolower($0)}')" in
        "linux") OS=Linux;;
        "macos") OS=Darwin;;
        *)
          echo Unsupported RUNNER_OS \"$RUNNER_OS\"
          exit -1
          ;;
        esac
        CRANE_URL=${CRANE_BASE_URL}/${CRANE_VERSION}/go-containerregistry_${OS}_${ARCH}.tar.gz
        echo $CRANE_URL
        wget --no-check-certificate --quiet -O - $CRANE_URL | tar xzf -
        chmod +x crane
      }

      download_crane

      echo {"auths":{"$REGISTRY_URL":{"auth":"$(echo -n ${REGISTRY_USER}:${REGISTRY_PASSWORD} | base64)"}}} > /kaniko/.docker/config.json

      cat /kaniko/.docker/config.json
      
      [ -n "${{ inputs.context }}" ] && kargs="$kargs --context ${{ inputs.context }} "
      [ -n "${{ inputs.dockerfile }}" ] && kargs="$kargs --dockerfile ${{ inputs.dockerfile }} "
      [ -n "${{ inputs.destination }}" ] && kargs="$kargs --destination ${{ inputs.destination }} "
      [ -n "${{ inputs.cache }}" ] && kargs="$kargs --cache "
      [ -n "${{ inputs.cleanup }}" ] && kargs="$kargs --cleanup "
      [ -n "${{ inputs.no-push }}" ] && kargs="$kargs --no-push "
      [ -n "${{ inputs.reproducible }}" ] && kargs="$kargs --reproducible "

      echo KANIKO FLAGS: $kargs

      /kaniko/executor $kargs
      
      echo EXIT CODE: $?